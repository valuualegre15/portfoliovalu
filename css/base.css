*,
*::after,
*::before {
  box-sizing: border-box;
}

:root {
  font-size: 14px;
  --color-text: #818181;
  --color-bg: #3b2261;
  --color-link: #a7a7a7;
  --color-link-hover: #fff;
  --color-trigger: #d2d2d2;
  --color-ui-bg: rgba(7, 7, 7, 0.219);
  --color-ui-border: #c4c4c4c5;
  --color-ui-border-deco: #d4d4d0;
  --color-ui-meta: #472a8a;
  --color-ring: #dcdfd1;
}

html,
body,
main {
  height: 100%;
}

body {
  margin: 0;
  color: var(--color-text);
  background-color: var(--color-bg);
  font-family: "lores-12", sans-serif;
  text-transform: uppercase;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  width: 100%;
  min-height: 100vh;
  min-height: -webkit-fill-available;
  overflow: hidden;
}

p {
  margin: 0 0 0.5rem;
}

/* Page Loader */
.js .loading::before,
.js .loading::after {
  content: "";
  position: fixed;
  z-index: 1000;
}

.js .loading::before {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--color-bg);
}

.js .loading::after {
  top: 50%;
  left: 50%;
  width: 60px;
  height: 60px;
  margin: -30px 0 0 -30px;
  border-radius: 50%;
  opacity: 0.4;
  background: var(--color-link);
  animation: loaderAnim 0.7s linear infinite alternate forwards;
}

@keyframes loaderAnim {
  to {
    opacity: 1;
    transform: scale3d(0.5, 0.5, 1);
  }
}

a {
  text-decoration: none;
  color: var(--color-link);
  outline: none;
  cursor: pointer;
}

a::before {
  content: "[";
}

a::after {
  content: "]";
}

a:hover {
  color: var(--color-link-hover);
  outline: none;
}

/* Better focus styles from https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible */
a:focus {
  /* Provide a fallback style for browsers
	 that don't support :focus-visible */
  outline: none;
  background: lightgrey;
}

a:focus:not(:focus-visible) {
  /* Remove the focus indicator on mouse-focus for browsers
	 that do support :focus-visible */
  background: transparent;
}

a:focus-visible {
  /* Draw a very noticeable focus style for
	 keyboard-focus on browsers that do support
	 :focus-visible */
  outline: 2px solid red;
  background: transparent;
}

.unbutton {
  background: none;
  border: 0;
  padding: 0;
  margin: 0;
  font: inherit;
  cursor: pointer;
}

.unbutton:focus {
  outline: none;
}

main {
  padding: 1rem;
  gap: 1rem;
  display: grid;
  height: 100vh;
  grid-template-columns: 1fr;
  grid-template-rows: auto 1fr;
  grid-template-areas: "frame" "content";
  background: linear-gradient(
      rgba(12, 11, 11, 0.699) 50%,
      rgba(65, 65, 65, 0.979) 50%
    ),
    linear-gradient(
      90deg,
      rgba(24, 16, 16, 0.09),
      rgba(4, 5, 4, 0.637),
      rgba(35, 35, 43, 0.06)
    );
  background-size: 100% 2px, 3px 100%;
}

.ui {
  position: relative;
  border: 1px solid var(--color-ui-border);
  background: var(--color-ui-bg);
  padding: 2rem;
  overflow: hidden;
}

.ui::before,
.ui::after {
  width: 10px;
  height: 10px;
  content: "";
  border: 1px solid var(--color-ui-border-deco);
  position: absolute;
}

.ui::before {
  top: -5px;
  left: -5px;
  border-right: 0;
  border-bottom: 0;
}

.ui::after {
  bottom: -5px;
  right: -5px;
  border-top: 0;
  border-left: 0;
}

.ui--small {
  font-size: 0.75rem;
}

.meta {
  display: none;
}

.meta--1 {
  grid-area: meta-1;
}

.meta--2 {
  grid-area: meta-2;
}

.meta--3 {
  grid-area: meta-3;
}

.meta--4 {
  grid-area: meta-4;
}

.meta h2 {
  margin: 0;
}

strong::before {
  content: "./_";
}

.frame {
  grid-area: frame;
  display: grid;
  grid-template-columns: 100%;
  grid-template-areas: "title" "prev" "back" "sponsor" "demos";
  grid-gap: 0.5rem;
  align-content: start;
}

body #cdawrap {
  justify-self: start;
}

.frame__title {
  grid-area: title;
  font-size: inherit;
  margin: 0;
  font-weight: inherit;
}

.frame__back {
  grid-area: back;
}

.frame__prev {
  grid-area: prev;
}

.content {
  grid-area: content;
  position: relative;
  height: 100%;
}

.content__inner {
  height: 100%;
  position: relative;
  padding-right: 2rem;
  overflow-y: scroll;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.content p {
  font-size: 1.25rem;
  margin: 0;
}

.trigger {
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */
  -khtml-user-select: none; /* Konqueror HTML */
  -moz-user-select: none; /* Old versions of Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none;
  cursor: pointer;
  color: var(--color-trigger);
}

/* width */
::-webkit-scrollbar {
  width: 1px;
}

/* Track */
::-webkit-scrollbar-track {
  background: #0d0e0c64;
}

/* Handle */
::-webkit-scrollbar-thumb {
  background: #a2a39f;
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #fbfcf6;
}

/* Animated globe by Mykl https://codepen.io/MB5/pen/LdaqRb */

@keyframes spin {
  to {
    transform: rotateY(-360deg);
  }
}

@keyframes opacity {
  to {
    opacity: 1;
  }
}

.scene {
  width: 80%;
  height: auto;
  aspect-ratio: 1;
  margin: 20% auto 0;
  perspective: 1000px;
}

.scene__inner {
  width: 100%;
  height: 100%;
  transform: rotateX(24deg) rotateY(0deg);
  transform-style: preserve-3d;
}

.globe {
  position: relative;
  width: 70%;
  height: 70%;
  margin: 0 auto;
  transform-style: preserve-3d;
  animation: spin 25s 0ms infinite linear;
}

.ring {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: 1px;
  border-style: dotted;
  border-radius: 50%;
  color: var(--color-ring);
  animation: opacity 0.75s forwards ease-in-out;
  opacity: 0;
}

.ring:nth-child(1) {
  transform: rotateY(4deg);
}

.ring:nth-child(2) {
  transform: rotateY(30deg);
}

.ring:nth-child(3) {
  transform: rotateY(56deg);
}

.ring:nth-child(4) {
  transform: rotateY(82deg);
}

.ring:nth-child(5) {
  transform: rotateY(108deg);
}

.ring:nth-child(6) {
  transform: rotateY(134deg);
}

.ring:nth-child(7) {
  transform: rotateY(160deg);
}

.glitch {
  animation-name: glitch-anim;
  animation-duration: 4s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
}

.glitch--1 {
  animation-delay: 16s;
}

.glitch--2 {
  animation-delay: 12s;
}

@keyframes glitch-anim {
  0% {
    transform: translate3d(-5px, 0, 0) scale3d(-1, -1, 1);
    -webkit-clip-path: polygon(0 20%, 100% 20%, 100% 21%, 0 21%);
    clip-path: polygon(0 20%, 100% 20%, 100% 21%, 0 21%);
  }
  2% {
    -webkit-clip-path: polygon(0 33%, 100% 33%, 100% 33%, 0 33%);
    clip-path: polygon(0 33%, 100% 33%, 100% 33%, 0 33%);
  }
  4% {
    -webkit-clip-path: polygon(0 44%, 100% 44%, 100% 44%, 0 44%);
    clip-path: polygon(0 44%, 100% 44%, 100% 44%, 0 44%);
  }
  5% {
    -webkit-clip-path: polygon(0 50%, 100% 50%, 100% 20%, 0 20%);
    clip-path: polygon(0 50%, 100% 50%, 100% 20%, 0 20%);
  }
  6% {
    -webkit-clip-path: polygon(0 70%, 100% 70%, 100% 70%, 0 70%);
    clip-path: polygon(0 70%, 100% 70%, 100% 70%, 0 70%);
  }
  7% {
    -webkit-clip-path: polygon(0 80%, 100% 80%, 100% 80%, 0 80%);
    clip-path: polygon(0 80%, 100% 80%, 100% 80%, 0 80%);
  }
  8% {
    -webkit-clip-path: polygon(0 50%, 100% 50%, 100% 55%, 0 55%);
    clip-path: polygon(0 50%, 100% 50%, 100% 55%, 0 55%);
  }
  9% {
    -webkit-clip-path: polygon(0 70%, 100% 70%, 100% 80%, 0 80%);
    clip-path: polygon(0 70%, 100% 70%, 100% 80%, 0 80%);
  }
  9.9% {
    transform: translate3d(-5px, 0, 0) scale3d(-1, -1, 1);
  }
  10%,
  100% {
    transform: translate3d(0, 0, 0) scale3d(1, 1, 1);
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
  }
}

@media screen and (min-width: 53em) {
  main {
    grid-template-columns: 1fr 50vw 1fr;
    grid-template-rows: auto auto 1fr;
    grid-template-areas:
      "frame content meta-4"
      "meta-2 content meta-3"
      "meta-2 content meta-1";
  }
  .meta {
    display: block;
  }
}

:root {
  --carousel-transition-duration: 250ms;
  --carousel-transition-ease: ease-out;
  --carousel-shadow-color-rgb: 128, 128, 128;
  --carousel-item-width: 10.5rem;
  --carousel-item-height: 17.5rem;
  --carousel-item-hover-effect: 1.075;
  --carousel-item-reflection-blur: 0.5rem;
  --carousel-item-glow-size: 5rem;
  --carousel-diameter: 40rem;
  --carousel-3d-perspective: 1000px;
  --carousel-3d-perspective-origin: 50% 20%;
  --carousel-control-button-width: 1.25rem;
  --carousel-control-button-height: 4rem;
  --carousel-control-color-rgb: 255, 255, 255;
  --carousel-animation-duration: 35s;
  --carousel-animation-play-state: running;
  --carousel-direction-animation-play-state: paused;
}

body {
  align-items: center;
  justify-content: center;
  height: 100vh;
  background-color: rgb(var(--carousel-bg-color-rgb));
  overflow: hidden;
}

.carousel {
  margin-left: 2rem;
  --_diameter: var(--carousel-diameter);
  --_radius: calc(var(--_diameter) / 2);
  --_item-width: var(--carousel-item-width);
  --_item-height: var(--carousel-item-height);
  perspective: var(--carousel-3d-perspective);
  perspective-origin: var(--carousel-3d-perspective-origin);
  width: var(--_diameter);
  height: var(--_diameter);
  /* border: 1px solid #ffffff; */
}

@media only screen and (max-width: 48rem) {
  .carousel {
    --_diameter: calc(var(--carousel-diameter) * 0.75);
    --_item-width: calc(var(--carousel-item-width) * 0.75);
    --_item-height: calc(var(--carousel-item-height) * 0.75);
  }
}

@media only screen and (max-width: 32rem) {
  .carousel {
    --_diameter: calc(var(--carousel-diameter) * 0.6);
    --_item-width: calc(var(--carousel-item-width) * 0.6);
    --_item-height: calc(var(--carousel-item-height) * 0.6);
  }
}

@media only screen and (max-width: 16rem) {
  .carousel {
    --_diameter: calc(var(--carousel-diameter) * 0.25);
    --_item-width: calc(var(--carousel-item-width) * 0.25);
    --_item-height: calc(var(--carousel-item-height) * 0.25);
  }
}

.carousel .carousel-control-button {
  --_width: var(--carousel-control-button-width);
  --_height: var(--carousel-control-button-height);
  z-index: 1;
  width: var(--_width);
  height: var(--_height);
  background-color: rgb(var(--carousel-control-color-rgb));
  opacity: 0.2;
  transition: opacity var(--carousel-transition-duration)
    var(--carousel-transition-ease);
  position: absolute;
}
.carousel .carousel-control-button:hover {
  opacity: 0.4;
}
.carousel .carousel-control-button:has(input:checked) {
  opacity: 0.8;
}

.carousel .carousel-control-button input {
  -webkit-appearance: none;
  appearance: none;
  opacity: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
}

.carousel .carousel-control-button.left {
  clip-path: polygon(0% 50%, 100% 0%, 100% 100%);
  top: calc(var(--_radius) - var(--_height) / 2);
  left: 0;
}
.carousel:has(.carousel-control-button.left input:checked) {
  --carousel-direction-animation-play-state: running;
}

.carousel .carousel-control-button.right {
  clip-path: polygon(0% 0%, 100% 50%, 0% 100%);
  top: calc(var(--_radius) - var(--_height) / 2);
  right: 0;
}
.carousel:has(.carousel-control-button.right input:checked) {
  --carousel-direction-animation-play-state: paused;
}

.carousel .carousel-rotation-direction {
  --_direction-animation-play-state: var(
    --carousel-direction-animation-play-state
  );
  --_z: calc(var(--_radius) * -1);
  transform: translateZ(var(--_z));
  transform-style: preserve-3d;
  animation: carousel-rotation-reverse
    calc(var(--carousel-animation-duration) / 2) reverse linear infinite
    var(--_direction-animation-play-state);
  transition: all var(--carousel-transition-duration)
    var(--carousel-transition-ease);
}

@keyframes carousel-rotation-reverse {
  from {
    transform: translateZ(var(--_z)) rotateY(0deg);
  }
  to {
    transform: translateZ(var(--_z)) rotateY(360deg);
  }
}

@keyframes carousel-rotation-normal {
  from {
    transform: rotateY(0deg);
  }
  to {
    transform: rotateY(360deg);
  }
}

.carousel .carousel-item-wrapper {
  transform-style: inherit;
  width: inherit;
  height: inherit;
  list-style-type: none;
  position: relative;
  animation: carousel-rotation-normal var(--carousel-animation-duration) normal
    linear infinite var(--carousel-animation-play-state);
  transition: all var(--carousel-transition-duration)
    var(--carousel-transition-ease);
}

.carousel .carousel-rotation-direction:has(.carousel-item:hover) {
  --carousel-animation-play-state: paused;
  --_direction-animation-play-state: paused;
}

.carousel .carousel-item {
  --_width: var(--_item-width);
  --_height: var(--_item-height);
  --_theta-start: 0;
  --_theta-length: calc(2 * 3.141592653589793);
  --_segment: calc(
    var(--_theta-start) + var(--_index) / var(--_num-elements) *
      var(--_theta-length)
  );
  --_x: calc(var(--_radius) * cos(var(--_segment)));
  --_y: 0;
  --_z: calc(var(--_radius) * sin(var(--_segment)));
  --_final-x: var(--_x);
  --_final-y: var(--_y);
  --_final-z: var(--_z);
  --_rotation-y: atan2(var(--_x), var(--_z));
  left: calc(var(--_radius) - var(--_item-width) / 2);
  top: calc(var(--_radius) - var(--_item-height) / 2);
  transform: translate3d(var(--_final-x), var(--_final-y), var(--_final-z));
  transform-style: inherit;
  width: var(--_width);
  height: var(--_height);
  box-shadow: 0 0 var(--carousel-item-glow-size) transparent;
  animation: carousel-item-rotation-reverse
    calc(var(--carousel-animation-duration) / 2) reverse linear infinite
    var(--_direction-animation-play-state);
  position: absolute;
}

@keyframes carousel-item-rotation-reverse {
  from {
    transform: translate3d(var(--_final-x), var(--_final-y), var(--_final-z))
      rotateY(360deg);
  }
  to {
    transform: translate3d(var(--_final-x), var(--_final-y), var(--_final-z))
      rotateY(0deg);
  }
}

@keyframes carousel-item-rotation-normal {
  from {
    transform: rotateY(360deg);
  }
  to {
    transform: rotateY(0deg);
  }
}

.carousel .carousel-item a {
  display: block;
  width: inherit;
  height: inherit;
  text-indent: -9999px;
  background-color: rgba(var(--carousel-item-empty-color-rgb), 0.5);
  background-image: var(--_image-url);
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  perspective: var(--carousel-3d-perspective);
  perspective-origin: var(--carousel-3d-perspective-origin);
  transition: all var(--carousel-transition-duration)
    var(--carousel-transition-ease);
  filter: grayscale(100%);
  animation: carousel-item-rotation-normal var(--carousel-animation-duration)
    normal linear infinite var(--carousel-animation-play-state);
  position: relative;
}

.carousel .carousel-item:hover a {
  filter: grayscale(0%);
  box-shadow: 0 0 var(--carousel-item-glow-size)
    rgb(var(--carousel-item-glow-color-rgb));
}

.carousel .carousel-item a::before {
  content: "";
  width: inherit;
  height: inherit;
  background-color: rgba(var(--carousel-item-empty-color-rgb), 0.5);
  background-image: linear-gradient(
      to top,
      rgba(var(--carousel-bg-color-rgb), 0.25) 0%,
      rgba(var(--carousel-bg-color-rgb), 1) 75%
    ),
    var(--_image-url);
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  pointer-events: none;
  top: calc(var(--carousel-item-reflection-blur) * -1);
  left: 0;
  filter: blur(var(--carousel-item-reflection-blur)) grayscale(100%);
  transition: filter var(--carousel-transition-duration)
    var(--carousel-transition-ease);
  transform-origin: center bottom;
  transform: rotateX(90deg) rotateZ(180deg) rotateY(180deg);
  position: absolute;
}

.carousel .carousel-item:hover a::before {
  filter: blur(var(--carousel-item-reflection-blur)) grayscale(0%);
}

.carousel .carousel-ground {
  --_width: var(--_diameter);
  --_height: var(--_diameter);
  --_rotation: 90deg;
  left: calc(var(--_radius) - var(--_width) / 2);
  top: calc(var(--_radius) - var(--_height) / 2);
  transform: rotateX(var(--_rotation))
    translateZ(calc(var(--_item-height) / -2));
  width: var(--_width);
  height: var(--_height);
  border-radius: 50%;
  background: radial-gradient(
    rgba(var(--carousel-shadow-color-rgb), 0.75) 15%,
    rgba(var(--carousel-bg-color-rgb), 0) 60%
  );
  opacity: 0.5;
  transition: opacity var(--carousel-transition-duration)
    var(--carousel-transition-ease);
  position: absolute;
}

.carousel .carousel-item-wrapper:has(.carousel-item:hover) .carousel-ground {
  opacity: 0.75;
}

.frame__arrow-2::before {
  content: "(" !important;
  display: none !important;
}

.frame__arrow-2::after {
  content: "(" !important;
  display: none !important;
}

.hover-name {
  font-weight: bold;
  transition: color 0.3s ease; /* Transición de color al pasar el cursor */
}

.hover-name:hover {
  color: #f0f0f0; /* Color al pasar el cursor */
}

.edit-text {
  text-align: center;
}

.skills-list {
  text-align: center;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --index: calc(1vw + 1vh);
  --transition: cubic-bezier(0.1, 0.7, 0, 1);
}

body {
  background-color: #141414;
}

.wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.items {
  display: flex;
  gap: 0.4rem;
  perspective: calc(var(--index) * 135);
}

.item {
  width: calc(var(--index) * 3);
  height: calc(var(--index) * 12);
  background-color: #222;
  background-size: cover;
  background-position: center;
  cursor: pointer;
  filter: grayscale(1) brightness(0.5);
  transition: transform 1.25s var(--transition), filter 3s var(--transition),
    width 1.25s var(--transition);
  will-change: transform, filter, rotateY, width;
}

.item::before,
.item::after {
  content: "";
  position: absolute;
  height: 100%;
  width: 20px;
  right: calc(var(--index) * -1);
}

.item::after {
  left: calc(var(--index) * -1);
}

.items .item:hover {
  filter: inherit;
  transform: translateZ(calc(var(--index) * 10));
}

/*Right*/

.items .item:hover + * {
  filter: inherit;
  transform: translateZ(calc(var(--index) * 8.5)) rotateY(35deg);
  z-index: -1;
}

.items .item:hover + * + * {
  filter: inherit;
  transform: translateZ(calc(var(--index) * 5.6)) rotateY(40deg);
  z-index: -2;
}

.items .item:hover + * + * + * {
  filter: inherit;
  transform: translateZ(calc(var(--index) * 2.5)) rotateY(30deg);
  z-index: -3;
}

.items .item:hover + * + * + * + * {
  filter: inherit;
  transform: translateZ(calc(var(--index) * 0.6)) rotateY(15deg);
  z-index: -4;
}

/*Left*/

.items .item:has(+ :hover) {
  filter: inherit;
  transform: translateZ(calc(var(--index) * 8.5)) rotateY(-35deg);
}

.items .item:has(+ * + :hover) {
  filter: inherit;
  transform: translateZ(calc(var(--index) * 5.6)) rotateY(-40deg);
}

.items .item:has(+ * + * + :hover) {
  filter: inherit;
  transform: translateZ(calc(var(--index) * 2.5)) rotateY(-30deg);
}

.items .item:has(+ * + * + * + :hover) {
  filter: inherit;
  transform: translateZ(calc(var(--index) * 0.6)) rotateY(-15deg);
}

.items .item:active,
.items .item:focus {
  width: 28vw;
  filter: inherit;
  z-index: 100;
  transform: translateZ(calc(var(--index) * 10));
  margin: 0 0.45vw;
}

.link-text {
  text-align: center;
  justify-content: center;
  color: #fffbfb;
}

.margin-txt {
  margin-top: 1rem;
}

.video-container {
  max-width: 800px;
  margin: 50px auto;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
}
.video-container video {
  width: 100%;
  height: auto;
  display: block;
}
.video-controls {
  background-color: rgba(0, 0, 0, 0.8);
  color: #fff;
  padding: 10px;
  display: flex;
  justify-content: center;
}
.video-controls button {
  background-color: transparent;
  border: none;
  color: #fff;
  font-size: 16px;
  cursor: pointer;
  margin: 0 10px;
  transition: opacity 0.3s;
}
.video-controls button:hover {
  opacity: 0.8;
}
